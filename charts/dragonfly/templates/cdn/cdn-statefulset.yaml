{{- if .Values.cdn.enable }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ template "dragonfly.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.cdn.name }}
  name: {{ template "dragonfly.cdn.fullname" . }}
  {{- if .Values.cdn.statefulsetAnnotations }}
  annotations:
{{ toYaml .Values.cdn.statefulsetAnnotations | indent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.cdn.replicas }}
  selector:
    matchLabels:
      app: {{ template "dragonfly.fullname" . }}
      component: {{ .Values.cdn.name }}
      release: {{ .Release.Name }}
  serviceName: cdn
  template:
    metadata:
      labels:
        app: {{ template "dragonfly.fullname" . }}
        component: {{ .Values.cdn.name }}
        release: {{ .Release.Name }}
        {{- if .Values.cdn.podLabels }}
{{ toYaml .Values.cdn.podLabels | indent 8 }}
        {{- end }}
      {{- if .Values.cdn.podAnnotations }}
      annotations:
{{ toYaml .Values.cdn.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.cdn.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.cdn.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.cdn.tolerations }}
      tolerations:
{{ toYaml .Values.cdn.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.cdn.affinity }}
      affinity:
{{ toYaml .Values.cdn.affinity | indent 8 }}
      {{- end }}
      {{- if quote .Values.cdn.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.cdn.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if and (.Capabilities.APIVersions.Has "scheduling.k8s.io/v1beta1") (.Values.cdn.priorityClassName) }}
      priorityClassName: {{ .Values.cdn.priorityClassName }}
      {{- end }}
      {{- if .Values.cdn.hostAliases }}
      hostAliases:
{{ toYaml .Values.cdn.hostAliases | indent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-manager
        image: {{ .Values.cdn.initContainer.image }}:{{ .Values.cdn.initContainer.tag  }}
        imagePullPolicy: {{ .Values.cdn.initContainer.pullPolicy }}
        {{- if .Values.manager.enable }}
        command: ['sh', '-c', 'until nslookup {{ template "dragonfly.manager.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} && nc -vz {{ template "dragonfly.manager.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} {{ .Values.manager.restPort }}; do echo waiting for manager; sleep 2; done;']
        {{- else }}
        command: ['sh', '-c', 'until nslookup {{ .Values.externalManager.host }} && nc -vz {{ .Values.externalManager.host }} {{ .Values.externalManager.restPort }}; do echo waiting for external manager; sleep 2; done;']
        {{- end }}
      containers:
      - name: cdn
        image: "{{ .Values.cdn.image }}:{{ .Values.cdn.tag }}"
        imagePullPolicy: {{ .Values.cdn.pullPolicy | quote }}
        resources:
{{ toYaml .Values.cdn.resources | indent 12 }}
        ports:
        - containerPort: {{ .Values.cdn.containerPort }}
          protocol: TCP
        - containerPort: {{ .Values.cdn.nginxContiainerPort }}
          protocol: TCP
        {{- if .Values.cdn.metrics.enable }}
        - containerPort: 8000
          protocol: TCP
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: "/etc/dragonfly"
        - name: nginx-config
          mountPath: "/etc/nginx/nginx.conf"
          subPath: "nginx.conf"
        - name: storage
          mountPath: {{ (index .Values.cdn.config.plugins.storageDriver 0).config.baseDir }}
        {{- if .Values.cdn.extraVolumeMounts }}
        {{- toYaml .Values.cdn.extraVolumeMounts | nindent 8 }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "dragonfly.cdn.fullname" $ }}
          items:
          - key: cdn.yaml
            path: cdn.yaml
      - name: nginx-config
        configMap:
          name: {{ template "dragonfly.cdn.fullname" $ }}
      {{- if not (.Values.cdn.persistence.enable) }}
      - name: storage
        emptyDir: {}
      {{- end }}
      {{- if .Values.cdn.extraVolumes }}
      {{- toYaml .Values.cdn.extraVolumes | nindent 6 }}
      {{- end }}
  {{- if .Values.cdn.persistence.enable }}
  volumeClaimTemplates:
    - metadata:
        name: storage
        {{- range $key, $value := .Values.cdn.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.cdn.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.cdn.persistence.size | quote }}
      {{- if .Values.cdn.persistence.storageClass }}
      {{- if (eq "-" .Values.cdn.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.cdn.persistence.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
{{- end }}
