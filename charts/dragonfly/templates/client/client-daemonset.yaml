{{- if .Values.client.enable }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "dragonfly.client.fullname" . }}
  labels:
    app: {{ template "dragonfly.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.client.name }}
  annotations:
  {{- if .Values.client.daemonsetAnnotations }}
{{ toYaml .Values.client.daemonsetAnnotations | indent 4 }}
  {{- end }}
spec:
  {{- if .Values.client.updateStrategy }}
  updateStrategy:
{{ toYaml .Values.client.updateStrategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "dragonfly.fullname" . }}
      component: "{{ .Values.client.name }}"
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "dragonfly.fullname" . }}
        component: "{{ .Values.client.name }}"
        release: {{ .Release.Name }}
        {{- if .Values.client.podLabels }}
{{ toYaml .Values.client.podLabels | indent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/client/client-configmap.yaml") . | sha256sum }}
      {{- if .Values.client.podAnnotations }}
{{ toYaml .Values.client.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.client.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.client.nodeSelector | indent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.client.hostNetwork }}
      {{- if .Values.client.hostNetwork }}
      dnsPolicy: "ClusterFirstWithHostNet"
      {{- end }}
      hostPID: {{ .Values.client.hostPID }}
      {{- if .Values.client.tolerations }}
      tolerations:
{{ toYaml .Values.client.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.client.affinity }}
      affinity:
{{ toYaml .Values.client.affinity | indent 8 }}
      {{- end }}
      {{- if quote .Values.client.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.client.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if and (.Capabilities.APIVersions.Has "scheduling.k8s.io/v1beta1") (.Values.client.priorityClassName) }}
      priorityClassName: {{ .Values.client.priorityClassName }}
      {{- end }}
      {{- with .Values.client.pullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.client.hostAliases }}
      hostAliases:
{{ toYaml .Values.client.hostAliases | indent 8 }}
      {{- end }}
      initContainers:
      {{- if .Values.scheduler.enable }}
      - name: wait-for-scheduler
        image: {{ .Values.client.initContainer.image }}:{{ .Values.client.initContainer.tag }}
        imagePullPolicy: {{ .Values.client.initContainer.pullPolicy }}
        command: ['sh', '-c', 'until nslookup {{ template "dragonfly.scheduler.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} && nc -vz {{ template "dragonfly.scheduler.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} {{ .Values.scheduler.config.server.port }}; do echo waiting for scheduler; sleep 2; done;']
      {{- end }}
      containers:
      - name: client
        image: {{ .Values.client.image }}:{{ .Values.client.tag }}
        imagePullPolicy: {{ .Values.client.pullPolicy | quote }}
        args:
        - --log-level={{ .Values.client.config.log.level }}
        {{- if .Values.client.config.verbose }}
        - --verbose
        {{- end }}
        resources:
{{ toYaml .Values.client.resources | indent 12 }}
        env:
        {{- if .Values.client.maxProcs }}
        - name: GOMAXPROCS
          value: {{ .Values.client.maxProcs }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.client.config.upload.server.port }}
          protocol: TCP
        {{- if .Values.client.metrics.enable }}
        - containerPort: {{ .Values.client.config.metrics.port }}
          protocol: TCP
        {{- end }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.client.config.upload.server.port }}"]
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:{{ .Values.client.config.upload.server.port }}"]
          initialDelaySeconds: 15
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: "/etc/dragonfly"
        - name: storage
          mountPath: {{ .Values.client.config.storage.dir }}
        {{- if .Values.client.extraVolumeMounts }}
        {{- toYaml .Values.client.extraVolumeMounts | nindent 8 }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "dragonfly.client.fullname" . }}
      - name: storage
        hostPath:
          path: {{ .Values.client.config.storage.dir }}
          type: DirectoryOrCreate
      {{- if .Values.client.extraVolumes }}
      {{- toYaml .Values.client.extraVolumes | nindent 6 }}
      {{- end }}
{{- end }}
